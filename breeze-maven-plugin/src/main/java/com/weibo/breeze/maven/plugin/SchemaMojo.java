/*
 *
 *   Copyright 2019 Weibo, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

package com.weibo.breeze.maven.plugin;

import com.weibo.breeze.BreezeException;
import com.weibo.breeze.BreezeUtil;
import com.weibo.breeze.SchemaLoader;
import com.weibo.breeze.SchemaUtil;
import com.weibo.breeze.message.Schema;
import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugin.descriptor.PluginDescriptor;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.classworlds.realm.ClassRealm;
import org.codehaus.plexus.util.FileUtils;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.codehaus.plexus.util.xml.Xpp3DomBuilder;

import java.io.File;
import java.io.FileInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;

/**
 * @author zhanglei28
 * @date 2019/5/16.
 */
@SuppressWarnings("rawtypes")
@Mojo(
        name = "schema",
        defaultPhase = LifecyclePhase.PREPARE_PACKAGE,
        requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME
)
public class SchemaMojo extends AbstractMojo {
    private static final String DEFAULT_INCLUDES = "**/*.xml";
    private static final String BREEZE_DIR = "META-INF" + File.separator + "breeze";
    private static final String HEADER_PREFIX = "// auto generated by breeze-maven-plugin (https://github.com/weibreeze/breeze)";
    private final Map<String, Class<?>> beanClasses = new HashMap<>();
    private final Map<String, Class<?>> willBeProcessedClasses = new HashMap<>();
    @Parameter(defaultValue = "${basedir}/src/main/resources")
    private String xmlPath;
    @Parameter(defaultValue = DEFAULT_INCLUDES)
    private String includes;
    @Parameter
    private String excludes;
    /**
     * service interfaces or bean classes want to generate breeze schema
     */
    @Parameter
    private List<String> classes;
    @Parameter(defaultValue = "${project}", readonly = true)
    private MavenProject project;
    @Parameter(defaultValue = "false")
    private Boolean withStaticField;
    private ClassRealm classRealm;
    private String srcBreezeDir;
    private String targetBreezeDir;

    @Override
    public void execute() throws MojoFailureException {
        getLog().info("breeze-maven-plugin:start generating schema");
        try {
            Set<String> classNames = getInterfaces();
            if (classes != null && !classes.isEmpty()) {
                classNames.addAll(classes);
            }
            addToBeanClasses(classNames);
            if (!beanClasses.isEmpty()) {
                srcBreezeDir = project.getBasedir().getAbsolutePath() + File.separator + "src" + File.separator + "main" + File.separator + "resources" + File.separator + BREEZE_DIR;
                targetBreezeDir = project.getBasedir().getAbsolutePath() + File.separator + "target" + File.separator + "classes" + File.separator + BREEZE_DIR;
                FileUtils.mkdir(srcBreezeDir);
                FileUtils.mkdir(targetBreezeDir);
                willBeProcessedClasses.putAll(beanClasses);
                Map<String, String> configs = new HashMap<>();
                if (withStaticField) {
                    configs.put(BreezeUtil.WITH_STATIC_FIELD_KEY, "true");
                }
                for (Class<?> clz : beanClasses.values()) {
                    generateSchema(clz, configs, willBeProcessedClasses);
                }
            }
        } catch (MojoFailureException failException) {
            throw failException;
        } catch (Exception e) {
            getLog().warn("breeze-maven-plugin: generate schema fail.", e);
        }
    }

    private Set<String> getInterfaces() {
        Set<String> interfaces = new HashSet<>();
        if (!"none".equals(xmlPath)) {
            try {
                List<File> list = FileUtils.getFiles(new File(xmlPath), includes, excludes);
                for (File file : list) {
                    Xpp3Dom dom = Xpp3DomBuilder.build(new FileInputStream(file), null); // input stream always be closed by builder after build
                    Xpp3Dom[] referers = dom.getChildren("motan:referer");
                    for (Xpp3Dom ref : referers) {
                        if (ref.getAttribute("interface") != null) {
                            interfaces.add(ref.getAttribute("interface"));
                        }
                        if (ref.getAttribute("serviceInterface") != null) {
                            interfaces.add(ref.getAttribute("serviceInterface"));
                        }
                    }
                }
            } catch (Exception e) {
                getLog().warn("parse xml file fail. xmlPath:" + xmlPath, e);
            }
        } else {
            getLog().info("skip xml file scan..");
        }
        return interfaces;
    }

    private void addToBeanClasses(Set<String> classNames) throws MalformedURLException, DependencyResolutionRequiredException {
        if (!classNames.isEmpty()) {
            initClassRealm();
            for (String className : classNames) {
                try {
                    Class clz = classRealm.loadClass(className);
                    BreezeUtil.findClassNeedProcess(clz, beanClasses);
                } catch (ClassNotFoundException ignore) {
                }
            }
        }
    }

    private void generateSchema(Class beanClass, Map<String, String> configs, Map<String, Class<?>> willBeProcessedClasses) throws MojoFailureException {
        Map<Class<?>, BreezeUtil.GenerateClassResult> result = new HashMap<>();
        try {
            BreezeUtil.generateClassSchema0(beanClass, configs, willBeProcessedClasses, result);
            if (!result.isEmpty()) {
                for (Map.Entry<Class<?>, BreezeUtil.GenerateClassResult> entry :
                        result.entrySet()) {
                    if (entry.getValue().success) {
                        generateBreezeFile(entry.getKey(), entry.getValue().schema);
                    }
                }
            }
        } catch (BreezeException e) {
            getLog().warn("breeze-maven-plugin: generate schema fail. class: " + beanClass.getName(), e);
        }
    }

    private void generateBreezeFile(Class<?> beanClass, Schema schema) {
        String name = BreezeUtil.getCleanName(beanClass);
        // not write file if already has schema in other jar
        try {
            Enumeration<URL> enumeration = classRealm.getResources(SchemaLoader.PATH + name + SchemaLoader.SUFFIX);
            URL elem;
            while (enumeration.hasMoreElements()) {
                elem = enumeration.nextElement();
                if ("jar".equals(elem.toURI().getScheme())) {
                    getLog().info(name + " already has schema in jar " + elem.toURI());
                    return;
                }
            }
        } catch (Exception ignore) {
        }

        String fileName = srcBreezeDir + File.separator + name + ".breeze";
        Schema oldSchema = null;
        try {
            String jarFileName = getJarFileName(beanClass);
            if (FileUtils.fileExists(fileName)) {
                String content = FileUtils.fileRead(fileName, "UTF-8");
                if (!content.startsWith(HEADER_PREFIX) // not auto generated by plugin
                        || (jarFileName != null && content.contains(jarFileName))) {  // or class in jar with same version
                    getLog().info("skip update schema for " + name + ", because old schema is not auto generated by plugin, or with same version.");
                    return; // just skip
                }
                oldSchema = SchemaUtil.parseSchema(content);
            }
            if (oldSchema != null) {
                SchemaUtil.checkCompatible(schema, oldSchema);
            }
            String header = HEADER_PREFIX;
            if (jarFileName != null) {
                header += " jar:" + jarFileName;
            }
            String content = header + "\n" + SchemaUtil.toFileContent(schema);// add generate comment header
            FileUtils.fileWrite(fileName, "UTF-8", content);
            FileUtils.fileWrite(targetBreezeDir + File.separator + name + ".breeze", "UTF-8", content);
            getLog().info("breeze-maven-plugin: generate schema success. class: " + name);
        } catch (Exception e) {
            getLog().warn("breeze-maven-plugin: generate schema fail. class: " + name, e);
        }
    }

    private String getJarFileName(Class clz) {
        String file = clz.getProtectionDomain().getCodeSource().getLocation().getFile();
        if (file.endsWith(".jar")) {
            return file.substring(file.lastIndexOf(File.separator) + 1);
        }
        return null;
    }

    private void initClassRealm() throws DependencyResolutionRequiredException, MalformedURLException {
        classRealm = ((PluginDescriptor) getPluginContext().get("pluginDescriptor")).getClassRealm();
        Set<String> classpathElements = new HashSet<>();
        classpathElements.add(project.getBuild().getOutputDirectory());
        classpathElements.addAll(project.getCompileClasspathElements());
        classpathElements.addAll(project.getRuntimeClasspathElements());
        for (String cp : classpathElements) {
            classRealm.addURL(new File(cp).toURI().toURL());
        }
    }
}
